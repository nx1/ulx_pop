ULX Population Study
====================

This repo contains auxilary files for the paper entitled The effect of Lense-Thirring
on the observed population of ULXs (in prep).


ULXLC
=====
XSPEC model ulxlc: http://www.sternwarte.uni-erlangen.de/~dauser/research/ulxlc/
How to install locally:
    1. Extract to desired location
    2. sudo apt install tcsh
    3. ./compile_ulxlc.csh 
    4. set LOCAL_MODEL_DIRECTORY in /home/.xspec/Xspec.init
    5. add export ULXLC_TABLE_PATH=/home/x1/localmodels/ulxlc to .bashrc
    

DATA FILES
==========
There are several data files that are too large for github.
data/interim/df_a.csv contains the MC simulation results from calculating alive/dead/transient systems from lightcurves.
data/curves/ contains the outputted lightcurves from ULXLC, these are around ~170kb each but end up adding upto a lot when
you have around 500k of them.

PIPELINE
========
0. startrack data
Raw datafiles from STARTRACK located in /data/external/data_mdot
The data from these files were combined into the file /data/processed/startrack_concat.csv
From this point forward, the unique system_id of each system is specified by the index in startrack_concat.csv

1. src/data/process_startrack.py
Takes the data from /data/processed/startrack_concat.csv
and calculates various other quantities which are saved in the file
/data/processed/all_systems_df.csv


2. src/ulxlc_runner.py
will sample systems from a df_a.csv (selecting only the systems that are beamed ULXs with opening angles < 45)
and run ulxlc to create a lightcurve with the system's specific parameters and the specified parameters for ULXLC.
The lightcurves are saved with the pattern:

theta-dincl-inclination.txt

Where theta and dincl are the half opening angles and the precessional angles.

and all lightcurve files are saved in data/curves/

For our simulations, the following fixed parameters were used:
period  = 10.0
phase   = 0.0
beta    = 0.2
norm    = 1.0
dopulse = 0.0


3. src/create_normalisation_lookup.py
Run through 0 inclination lightcurves and calculate normalisation ULX
limits at 1E39 ergs equivilent, store the output in a .pkl file for further use.

The pickle file can be found in /data/processed/N_lim_dict.pickle

final dict is in the form:
N_lim_dict = {system_id-dincl-inclination : N_lim}


3. src/curve_classifier.py
Used to process the lightcurve files and classify the system as either alive/dead/transient.
Does this in a 'quick' manner i.e does the lightcurve span over the 1e39 range and therefore is transient.

The results of this processed are saved in the file:
/data/processed/curve_classications.csv


4. src/df_a_analysis.py
4. src/bh_vs_classification.py

simulates the effect of sampling systems from the FULL ulx population
in a specified BH ratio and the the number of alive/dead transient systems


1. sample a N ULXs in a specified bh ratio.
2. Is it visible
seperate by metallicity and tage.


Could we calculate for each system, a probably distribution for
its curve classification?

yes, by sampling from them we are essentially doing that.





samples from curve_classifcations to calculate the effect of the
BH_ratio on the alive/dead/transient population


The results from these simulations are saved in:
data/interim/sims_with_metallicity/{Z}/{results.csv}


5. alive_dead_transient_plotter.py
Is used to plot the results from step 4.

ULX System
-----------
- Z (Metallicity)
- tage (Age)
- mass
- mdot
- is_bh
- L_Edd     (Eddington Luminosity)
- eta       (Accretion Efficiency)
- mdot_Edd  (mdot in Eddington units)
- mdot
- Lx_iso
- b
- Lx
- theta_half_deg (opening angle, theta/2)
- inclination
- dincl
- zeta      (cotangent of the wind opening angle)
- spin
- R_g
- r_schw
- r_isco
- r_in
- r_sph
- r_out
- P_inflow_at_r_sph
- P_envolope
- P_wind
- P_Free_precession

Population
----------
- size
- N_bh
- N_ns
- bh_percent
- ns_percent
- Z
- tage

Curve (LightCurve)
------------------
- path
- filename

- period
- phase
- theta
- inclination
- dincl
- beta
- dopulse
- norm




eRASS

prob_eRASS 1 - 8 : 0.00 - 1.00

Sample N systems from whole ULX population.
What percentage of the whole population will be observed after N cycles?

System 1:
    N_samples = 10 000
    sample 1:      Flux         Above?      Transient?
        - Cycle 1: 1E40         True        False           
        - Cycle 2: 2.5E39       True        False
        - Cycle 3: 1E38         False       True
    sample 2:   
        - Cycle 1: 1E38         False       False
        - Cycle 2: 2E38         False       False
        - Cycle 3: 1.5E38       False       False
    Sample 3:
        - Cycle 1: 2E39         True        False
        - Cycle 2: 3E39         True        False
        - cYCLE 3: 4E39         True        False


f(above):
    above       = [1,1,1,1,1,1,1,1]
    transient   = [0,0,0,0,0,0,0,0]

    above       = [0,0,0,0,0,0,0,0]
    transient   = [0,0,0,0,0,0,0,0]

    above       = [0,0,0,1,0,1,0,1]
    transient   = [0,0,0,1,1,1,1,1]

    above       = [1,1,1,0,0,0,0,0]
    transient   = [0,0,0,1,1,1,1,1]


f(above):
    transient = [0] * 7
    last = above[0]

    for i in above[1:]:
        if last != current:
            transient[i:] = 1
            break

    return transient


samples = [[0,0,0,0,0,0,0]
           [0,0,0,0,0,1,1]
           [0,0,1,1,1,1,1]
           ...
           [0,0,0,1,1,1,1]]

probability = N_transient / N (mean)


Curve_classifications
id   curve_id    system_id        Classification    P
0    284         937              Alive             [0] * 7
1    238         102              Transient         []
3    519         857              Dead              [0] * 7



Possible things we could investigate:

Curve_id --> 
    - period
    - phase
    - theta
    - inclination
    - dincl
    - beta
    - dopulse
    - norm

system_id:
    - Z (Metallicity)
    - tage (Age)
    - mass
    - mdot
    - is_bh
    - Lx
    - theta_half_deg (opening angle, theta/2)
    - inclination
    - dincl
    - spin
    - P_wind
    - P_Free_precession



Pick N samples from whole ULX population:

N           = 500
N_alive     = 30
N_Dead      = 70
N_transient = N - N_alive - N_dead - N_transient

%_alive     = N_alive / N
%_dead      = N_dead / N
%_transient = N_transient / N



Transient systems:
sys1: P = [0, 0.35, 0.38, 0.56, 0.88, 1.00]
sys2: P = [0, 0.63, 0.72, 0.98, 1.00, 1.00]
...
sys:  P = [                               ]

mean  P = [0, 0.73, 0.92, 1.00, 2.00, 1.00]
std   P = 


After which cycle was the system observed as transient?
system 1
    - Run 1:    6th
    - Run 2:    5th
    - Run 3:    5th
    Average = 6+5+5 / 3 = 5.333     []
    

Impose cuts for precession angles:
    0 - 10
    0 - 20
    0 - 30
    0 - 40

Count the total unique systems in each cut


==============
Things we can measure with eRASS:
    - cycle number
    
    - number of total ulxs
    - number of new ulxs
    - number of alive ulxs
    - number of transient ulx

- Impose constraints 0 - 10 dincl.
Draw 500 ULXs
    For each ulx
        - Find all sub-systems (dincl + i combinations)
        - number_of_sub_systems (46*91)   = 4186
        - number_of_alive_sub_systems     = 1000    (constant over all erass cycles)
        - number_of_dead_sub_systems      = 1000    (constant over all erass cycles)
        - number_of_transient_sub_systems = 2186

        - For the transient sub systems:
            get their erass transient probabilities
                P1 = [0, 0.25, 0.5, 0.75, 0.8, 0.9, 0.98, 1.00]
                P2 = [0, 0.35, 0.6, 0.65, 0.7, 0.9, 0.94, 0.998]
                ..etc

            calculate the number of transients for each eRASS cycle
                - sum all the probabilites
